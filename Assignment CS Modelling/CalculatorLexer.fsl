// The generated lexer module will start with this code
{
module CalculatorLexer
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open CalculatorParser
// Set the language to English such that 4.0 is parsed as 4 and not 40.
System.Globalization.CultureInfo.CurrentCulture <- new System.Globalization.CultureInfo("en-US")
}

// We define macros for some regular expressions we will use later
let char        = ['a'-'z' 'A'-'Z']
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let VARIABLE    = char(char|digit)*


// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//       This is important when tokens overlap (not in this example)
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
// deal with tokens that need to be built

// b:
| "true"        { TRUE }
| "false"       { FALSE }
| '&'           { BITWISEAND }
| '|'           { BITWISEOR }
| "&&"          { AND }
| "||"          { OR }
| '!'           { NEG }
| '>'           { LGREATER }
| ">="          { LGREATEREQUAL }
| '<'           { RGREATER }
| "<="          { RGREATEREQUAL }

//gc:
//| "->”          { IFTHEN }
//| "[]”          { FATBAR }

//c:
//| ":="          { ASSIGN }
//| ';'           { ORDER }
//| "if"          { IF }
//| "fi"          { FI }
//| "do"          { DO }
//| "od"          { OD }

// a:
| num           { NUM(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| VARIABLE      { let str = LexBuffer<_>.LexemeString lexbuf in VARIABLE(str) }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| '['           { LBRAK }
| ']'           { RBRAK }
| eof           { EOF }

