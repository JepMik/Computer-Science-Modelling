// Signature file for parser generated by fsyacc
module CalculatorParser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | LBRAK
  | RBRAK
  | ASSIGN
  | SKIP
  | ORDER
  | IF
  | FI
  | DO
  | OD
  | IFTHEN
  | FATBAR
  | BITWISEAND
  | BITWISEOR
  | AND
  | OR
  | NEG
  | EQUAL
  | NOTEQUAL
  | LGREATER
  | LGREATEREQUAL
  | RGREATER
  | RGREATEREQUAL
  | FALSE
  | TRUE
  | NUM of (float)
  | VARIABLE of (string)
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_LBRAK
    | TOKEN_RBRAK
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_ORDER
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_IFTHEN
    | TOKEN_FATBAR
    | TOKEN_BITWISEAND
    | TOKEN_BITWISEOR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_NOTEQUAL
    | TOKEN_LGREATER
    | TOKEN_LGREATEREQUAL
    | TOKEN_RGREATER
    | TOKEN_RGREATEREQUAL
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_NUM
    | TOKEN_VARIABLE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_booleanexpr
    | NONTERM_expression
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (expr) 
