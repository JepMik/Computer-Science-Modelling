// Implementation file for parser generated by fsyacc
module InputParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "InputParser.fsp"

  open TypesAST

# 10 "InputParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SAND
  | SOR
  | AND
  | OR
  | NEG
  | EQUAL
  | NOTEQ
  | GREATER
  | LESS
  | GREATEREQ
  | LESSEQ
  | SETR
  | DELIM
  | LBRAK
  | RBRAK
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | LN
  | LOG
  | BOOL of (bool)
  | VARIABLE of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATEREQ
    | TOKEN_LESSEQ
    | TOKEN_SETR
    | TOKEN_DELIM
    | TOKEN_LBRAK
    | TOKEN_RBRAK
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_LN
    | TOKEN_LOG
    | TOKEN_BOOL
    | TOKEN_VARIABLE
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_expression1
    | NONTERM_str
    | NONTERM_boolexpression
    | NONTERM_inputvalues
    | NONTERM_seqinput

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | SAND  -> 0 
  | SOR  -> 1 
  | AND  -> 2 
  | OR  -> 3 
  | NEG  -> 4 
  | EQUAL  -> 5 
  | NOTEQ  -> 6 
  | GREATER  -> 7 
  | LESS  -> 8 
  | GREATEREQ  -> 9 
  | LESSEQ  -> 10 
  | SETR  -> 11 
  | DELIM  -> 12 
  | LBRAK  -> 13 
  | RBRAK  -> 14 
  | TIMES  -> 15 
  | DIV  -> 16 
  | PLUS  -> 17 
  | MINUS  -> 18 
  | POW  -> 19 
  | LPAR  -> 20 
  | RPAR  -> 21 
  | EOF  -> 22 
  | LN  -> 23 
  | LOG  -> 24 
  | BOOL _ -> 25 
  | VARIABLE _ -> 26 
  | NUM _ -> 27 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SAND 
  | 1 -> TOKEN_SOR 
  | 2 -> TOKEN_AND 
  | 3 -> TOKEN_OR 
  | 4 -> TOKEN_NEG 
  | 5 -> TOKEN_EQUAL 
  | 6 -> TOKEN_NOTEQ 
  | 7 -> TOKEN_GREATER 
  | 8 -> TOKEN_LESS 
  | 9 -> TOKEN_GREATEREQ 
  | 10 -> TOKEN_LESSEQ 
  | 11 -> TOKEN_SETR 
  | 12 -> TOKEN_DELIM 
  | 13 -> TOKEN_LBRAK 
  | 14 -> TOKEN_RBRAK 
  | 15 -> TOKEN_TIMES 
  | 16 -> TOKEN_DIV 
  | 17 -> TOKEN_PLUS 
  | 18 -> TOKEN_MINUS 
  | 19 -> TOKEN_POW 
  | 20 -> TOKEN_LPAR 
  | 21 -> TOKEN_RPAR 
  | 22 -> TOKEN_EOF 
  | 23 -> TOKEN_LN 
  | 24 -> TOKEN_LOG 
  | 25 -> TOKEN_BOOL 
  | 26 -> TOKEN_VARIABLE 
  | 27 -> TOKEN_NUM 
  | 30 -> TOKEN_end_of_input
  | 28 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression1 
    | 13 -> NONTERM_expression1 
    | 14 -> NONTERM_expression1 
    | 15 -> NONTERM_expression1 
    | 16 -> NONTERM_str 
    | 17 -> NONTERM_boolexpression 
    | 18 -> NONTERM_boolexpression 
    | 19 -> NONTERM_boolexpression 
    | 20 -> NONTERM_boolexpression 
    | 21 -> NONTERM_boolexpression 
    | 22 -> NONTERM_boolexpression 
    | 23 -> NONTERM_boolexpression 
    | 24 -> NONTERM_boolexpression 
    | 25 -> NONTERM_boolexpression 
    | 26 -> NONTERM_boolexpression 
    | 27 -> NONTERM_boolexpression 
    | 28 -> NONTERM_boolexpression 
    | 29 -> NONTERM_boolexpression 
    | 30 -> NONTERM_boolexpression 
    | 31 -> NONTERM_inputvalues 
    | 32 -> NONTERM_inputvalues 
    | 33 -> NONTERM_inputvalues 
    | 34 -> NONTERM_inputvalues 
    | 35 -> NONTERM_seqinput 
    | 36 -> NONTERM_seqinput 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 30 
let _fsyacc_tagOfErrorTerminal = 28

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | NOTEQ  -> "NOTEQ" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATEREQ  -> "GREATEREQ" 
  | LESSEQ  -> "LESSEQ" 
  | SETR  -> "SETR" 
  | DELIM  -> "DELIM" 
  | LBRAK  -> "LBRAK" 
  | RBRAK  -> "RBRAK" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EOF  -> "EOF" 
  | LN  -> "LN" 
  | LOG  -> "LOG" 
  | BOOL _ -> "BOOL" 
  | VARIABLE _ -> "VARIABLE" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATEREQ  -> (null : System.Object) 
  | LESSEQ  -> (null : System.Object) 
  | SETR  -> (null : System.Object) 
  | DELIM  -> (null : System.Object) 
  | LBRAK  -> (null : System.Object) 
  | RBRAK  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | LN  -> (null : System.Object) 
  | LOG  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 24us; 65535us; 23us; 4us; 24us; 5us; 25us; 6us; 26us; 7us; 27us; 8us; 28us; 9us; 29us; 10us; 32us; 11us; 40us; 12us; 41us; 13us; 52us; 14us; 53us; 14us; 54us; 14us; 55us; 14us; 56us; 14us; 57us; 16us; 58us; 17us; 59us; 18us; 60us; 19us; 61us; 20us; 62us; 21us; 65us; 15us; 66us; 22us; 71us; 22us; 26us; 65535us; 23us; 34us; 24us; 34us; 25us; 34us; 26us; 34us; 27us; 34us; 28us; 34us; 29us; 34us; 32us; 34us; 36us; 37us; 38us; 39us; 40us; 34us; 41us; 34us; 52us; 34us; 53us; 34us; 54us; 34us; 55us; 34us; 56us; 34us; 57us; 34us; 58us; 34us; 59us; 34us; 60us; 34us; 61us; 34us; 62us; 34us; 65us; 34us; 66us; 34us; 71us; 34us; 26us; 65535us; 0us; 64us; 23us; 30us; 24us; 30us; 25us; 30us; 26us; 30us; 27us; 30us; 28us; 30us; 29us; 30us; 32us; 30us; 40us; 30us; 41us; 31us; 52us; 31us; 53us; 31us; 54us; 31us; 55us; 31us; 56us; 31us; 57us; 30us; 58us; 30us; 59us; 30us; 60us; 30us; 61us; 30us; 62us; 30us; 65us; 31us; 66us; 30us; 70us; 64us; 71us; 30us; 7us; 65535us; 41us; 50us; 52us; 45us; 53us; 46us; 54us; 47us; 55us; 48us; 56us; 49us; 65us; 51us; 2us; 65535us; 0us; 2us; 70us; 69us; 2us; 65535us; 66us; 67us; 71us; 72us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 28us; 55us; 82us; 90us; 93us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 34us; 1us; 1us; 6us; 2us; 2us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 7us; 6us; 2us; 3us; 4us; 5us; 6us; 8us; 6us; 2us; 3us; 4us; 5us; 6us; 10us; 6us; 2us; 3us; 4us; 5us; 6us; 15us; 12us; 2us; 3us; 4us; 5us; 6us; 15us; 24us; 25us; 26us; 27us; 28us; 29us; 11us; 2us; 3us; 4us; 5us; 6us; 24us; 25us; 26us; 27us; 28us; 29us; 12us; 2us; 3us; 4us; 5us; 6us; 24us; 25us; 26us; 27us; 28us; 29us; 31us; 6us; 2us; 3us; 4us; 5us; 6us; 24us; 6us; 2us; 3us; 4us; 5us; 6us; 25us; 6us; 2us; 3us; 4us; 5us; 6us; 26us; 6us; 2us; 3us; 4us; 5us; 6us; 27us; 6us; 2us; 3us; 4us; 5us; 6us; 28us; 6us; 2us; 3us; 4us; 5us; 6us; 29us; 7us; 2us; 3us; 4us; 5us; 6us; 35us; 36us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 2us; 9us; 10us; 3us; 9us; 10us; 18us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 2us; 15us; 30us; 1us; 15us; 1us; 16us; 1us; 17us; 5us; 19us; 19us; 20us; 21us; 22us; 5us; 19us; 20us; 20us; 21us; 22us; 5us; 19us; 20us; 21us; 21us; 22us; 5us; 19us; 20us; 21us; 22us; 22us; 5us; 19us; 20us; 21us; 22us; 23us; 5us; 19us; 20us; 21us; 22us; 30us; 5us; 19us; 20us; 21us; 22us; 32us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 3us; 31us; 32us; 33us; 3us; 31us; 32us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 2us; 34us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 16us; 23us; 30us; 37us; 44us; 51us; 58us; 65us; 72us; 85us; 97us; 110us; 117us; 124us; 131us; 138us; 145us; 152us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 177us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 202us; 204us; 206us; 208us; 214us; 220us; 226us; 232us; 238us; 244us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 274us; 278us; 282us; 284us; 286us; 288us; 291us; 293us; 295us; |]
let _fsyacc_action_rows = 73
let _fsyacc_actionTableElements = [|1us; 32768us; 26us; 43us; 0us; 49152us; 2us; 32768us; 12us; 70us; 22us; 3us; 0us; 16385us; 1us; 16386us; 19us; 27us; 1us; 16387us; 19us; 27us; 3us; 16388us; 15us; 23us; 16us; 24us; 19us; 27us; 3us; 16389us; 15us; 23us; 16us; 24us; 19us; 27us; 1us; 16390us; 19us; 27us; 1us; 16391us; 19us; 27us; 1us; 16392us; 19us; 27us; 6us; 32768us; 14us; 33us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 6us; 32768us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 21us; 42us; 12us; 32768us; 5us; 57us; 6us; 58us; 7us; 59us; 8us; 61us; 9us; 60us; 10us; 62us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 21us; 42us; 11us; 32768us; 5us; 57us; 6us; 58us; 7us; 59us; 8us; 61us; 9us; 60us; 10us; 62us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 11us; 16415us; 5us; 57us; 6us; 58us; 7us; 59us; 8us; 61us; 9us; 60us; 10us; 62us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 5us; 16408us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 5us; 16409us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 5us; 16410us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 5us; 16411us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 5us; 16412us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 5us; 16413us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 6us; 16420us; 12us; 71us; 15us; 23us; 16us; 24us; 17us; 25us; 18us; 26us; 19us; 27us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 1us; 16393us; 13us; 32us; 5us; 16393us; 0us; 16402us; 1us; 16402us; 2us; 16402us; 3us; 16402us; 13us; 32us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 4us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 27us; 35us; 0us; 16397us; 4us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 27us; 35us; 0us; 16398us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 9us; 32768us; 4us; 56us; 17us; 38us; 18us; 36us; 20us; 41us; 23us; 29us; 24us; 28us; 25us; 44us; 26us; 43us; 27us; 35us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16403us; 2us; 16404us; 0us; 52us; 2us; 54us; 0us; 16405us; 2us; 16406us; 0us; 52us; 2us; 54us; 0us; 16407us; 5us; 32768us; 0us; 52us; 1us; 53us; 2us; 54us; 3us; 55us; 21us; 63us; 4us; 16416us; 0us; 52us; 1us; 53us; 2us; 54us; 3us; 55us; 9us; 32768us; 4us; 56us; 17us; 38us; 18us; 36us; 20us; 41us; 23us; 29us; 24us; 28us; 25us; 44us; 26us; 43us; 27us; 35us; 9us; 32768us; 4us; 56us; 17us; 38us; 18us; 36us; 20us; 41us; 23us; 29us; 24us; 28us; 25us; 44us; 26us; 43us; 27us; 35us; 9us; 32768us; 4us; 56us; 17us; 38us; 18us; 36us; 20us; 41us; 23us; 29us; 24us; 28us; 25us; 44us; 26us; 43us; 27us; 35us; 9us; 32768us; 4us; 56us; 17us; 38us; 18us; 36us; 20us; 41us; 23us; 29us; 24us; 28us; 25us; 44us; 26us; 43us; 27us; 35us; 9us; 32768us; 4us; 56us; 17us; 38us; 18us; 36us; 20us; 41us; 23us; 29us; 24us; 28us; 25us; 44us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 0us; 16414us; 1us; 32768us; 11us; 65us; 10us; 32768us; 4us; 56us; 13us; 66us; 17us; 38us; 18us; 36us; 20us; 41us; 23us; 29us; 24us; 28us; 25us; 44us; 26us; 43us; 27us; 35us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 1us; 32768us; 14us; 68us; 0us; 16417us; 1us; 16418us; 12us; 70us; 1us; 32768us; 26us; 43us; 7us; 32768us; 17us; 38us; 18us; 36us; 20us; 40us; 23us; 29us; 24us; 28us; 26us; 43us; 27us; 35us; 0us; 16419us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 6us; 7us; 9us; 11us; 15us; 19us; 21us; 23us; 25us; 32us; 39us; 52us; 64us; 76us; 82us; 88us; 94us; 100us; 106us; 112us; 119us; 127us; 135us; 143us; 151us; 159us; 167us; 175us; 177us; 183us; 191us; 192us; 193us; 194us; 199us; 200us; 205us; 206us; 214us; 224us; 225us; 226us; 227us; 228us; 231us; 232us; 235us; 236us; 242us; 247us; 257us; 267us; 277us; 287us; 297us; 305us; 313us; 321us; 329us; 337us; 345us; 346us; 348us; 359us; 367us; 369us; 370us; 372us; 374us; 382us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 1us; 4us; 1us; 1us; 2us; 2us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 7us; 7us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 16395us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 65535us; 16399us; 16400us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 16419us; |]
let _fsyacc_reductions ()  =    [| 
# 270 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : inputVal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 279 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : inputVal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "InputParser.fsp"
                                                          _1 
                   )
# 49 "InputParser.fsp"
                 : inputVal));
# 290 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "InputParser.fsp"
                                                           TimesExpr(_1,_3) 
                   )
# 62 "InputParser.fsp"
                 : arithExpr));
# 302 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "InputParser.fsp"
                                                           DivExpr(_1,_3) 
                   )
# 63 "InputParser.fsp"
                 : arithExpr));
# 314 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "InputParser.fsp"
                                                           PlusExpr(_1,_3) 
                   )
# 64 "InputParser.fsp"
                 : arithExpr));
# 326 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "InputParser.fsp"
                                                           MinusExpr(_1,_3) 
                   )
# 65 "InputParser.fsp"
                 : arithExpr));
# 338 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "InputParser.fsp"
                                                           PowExpr(_1,_3) 
                   )
# 66 "InputParser.fsp"
                 : arithExpr));
# 350 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "InputParser.fsp"
                                                           LogExpr(_2) 
                   )
# 67 "InputParser.fsp"
                 : arithExpr));
# 361 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "InputParser.fsp"
                                                           LnExpr(_2) 
                   )
# 68 "InputParser.fsp"
                 : arithExpr));
# 372 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "InputParser.fsp"
                                                           StrA(_1) 
                   )
# 69 "InputParser.fsp"
                 : arithExpr));
# 383 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "InputParser.fsp"
                                                           IndexExpr(_1,_3) 
                   )
# 70 "InputParser.fsp"
                 : arithExpr));
# 395 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "InputParser.fsp"
                                                           _1 
                   )
# 71 "InputParser.fsp"
                 : arithExpr));
# 406 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "InputParser.fsp"
                                                           Num(_1) 
                   )
# 74 "InputParser.fsp"
                 : arithExpr));
# 417 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "InputParser.fsp"
                                                           UMinusExpr(_2) 
                   )
# 75 "InputParser.fsp"
                 : arithExpr));
# 428 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "InputParser.fsp"
                                                           UPlusExpr(_2) 
                   )
# 76 "InputParser.fsp"
                 : arithExpr));
# 439 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "InputParser.fsp"
                                                           _2 
                   )
# 77 "InputParser.fsp"
                 : arithExpr));
# 450 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "InputParser.fsp"
                                                           _1 
                   )
# 81 "InputParser.fsp"
                 : 'str));
# 461 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "InputParser.fsp"
                                                                   Bool(_1) 
                   )
# 88 "InputParser.fsp"
                 : boolExpr));
# 472 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "InputParser.fsp"
                                                                   StrB(_1) 
                   )
# 89 "InputParser.fsp"
                 : boolExpr));
# 483 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "InputParser.fsp"
                                                                   ShortCircuitAnd(_1,_3) 
                   )
# 90 "InputParser.fsp"
                 : boolExpr));
# 495 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "InputParser.fsp"
                                                                   ShortCircuitOr(_1,_3) 
                   )
# 91 "InputParser.fsp"
                 : boolExpr));
# 507 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "InputParser.fsp"
                                                                   LogAnd(_1,_3) 
                   )
# 92 "InputParser.fsp"
                 : boolExpr));
# 519 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "InputParser.fsp"
                                                                   LogOr(_1,_3) 
                   )
# 93 "InputParser.fsp"
                 : boolExpr));
# 531 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "InputParser.fsp"
                                                                   Neg(_2)
                   )
# 94 "InputParser.fsp"
                 : boolExpr));
# 542 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "InputParser.fsp"
                                                                   Equal(_1,_3) 
                   )
# 95 "InputParser.fsp"
                 : boolExpr));
# 554 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "InputParser.fsp"
                                                                   NotEqual(_1,_3) 
                   )
# 96 "InputParser.fsp"
                 : boolExpr));
# 566 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "InputParser.fsp"
                                                                   Greater(_1,_3) 
                   )
# 97 "InputParser.fsp"
                 : boolExpr));
# 578 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "InputParser.fsp"
                                                                   GreaterEqual(_1,_3) 
                   )
# 98 "InputParser.fsp"
                 : boolExpr));
# 590 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "InputParser.fsp"
                                                                   Less(_1,_3) 
                   )
# 99 "InputParser.fsp"
                 : boolExpr));
# 602 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "InputParser.fsp"
                                                                   LessEqual(_1,_3) 
                   )
# 100 "InputParser.fsp"
                 : boolExpr));
# 614 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "InputParser.fsp"
                                                                   _2 
                   )
# 101 "InputParser.fsp"
                 : boolExpr));
# 625 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "InputParser.fsp"
                                                                   SetArith(_1,_3) 
                   )
# 111 "InputParser.fsp"
                 : inputVal));
# 637 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "InputParser.fsp"
                                                                   SetBool(_1,_3) 
                   )
# 112 "InputParser.fsp"
                 : inputVal));
# 649 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'str)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : seqInput)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "InputParser.fsp"
                                                                   SetArray(_1,_4) 
                   )
# 113 "InputParser.fsp"
                 : inputVal));
# 661 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : inputVal)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : inputVal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "InputParser.fsp"
                                                                   SetDelim(_1,_3) 
                   )
# 114 "InputParser.fsp"
                 : inputVal));
# 673 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : seqInput)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "InputParser.fsp"
                                                                   Seq(_1,_3) 
                   )
# 117 "InputParser.fsp"
                 : seqInput));
# 685 "InputParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : arithExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "InputParser.fsp"
                                                                   Singl(_1) 
                   )
# 118 "InputParser.fsp"
                 : seqInput));
|]
# 697 "InputParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 31;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : inputVal =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
