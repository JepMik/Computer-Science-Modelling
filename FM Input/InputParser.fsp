// Open the file that defines the different types we shall use as AST in out GCL-parser
%{
  open TypesAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VARIABLE
%token <bool> BOOL
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF LN LOG ZER
%token LBRAK RBRAK LCURL RCURL
%token SETR DELIM
%token SAND SOR AND OR NEG EQUAL NOTEQ GREATER LESS GREATEREQ LESSEQ
//the actual formats of these tokens are defined in the lexer file as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)

%left PLUS MINUS
%left TIMES DIV
%right POW LOG LN

%left OR SOR
%left AND SAND
%right NEG

%right SETR
%right DELIM 

%nonassoc LPAR RPAR

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <cheat> start
%type <arithExpr> expression
%type <arithExpr> expression1
%type <boolExpr> boolexpression
%type <seqInput> seqinput
%type <inputVal> inputvalues
%type <signSeq> seqsign
%type <signValue> signvalues
%type <cheat> cheat
// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: cheat EOF                {$1}

cheat:
  | inputvalues             { I($1) }
  | signvalues              { S($1) }


// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

// Arithmetic productions
//a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a) | ln a | log a
expression:
  | expression TIMES expression     { TimesExpr($1,$3) }
  | expression DIV expression       { DivExpr($1,$3) }
  | expression PLUS expression      { PlusExpr($1,$3) }
  | expression MINUS expression     { MinusExpr($1,$3) }
  | expression POW expression       { PowExpr($1,$3) }
  | LOG expression                  { LogExpr($2) } 
  | LN expression                   { LnExpr($2) }
  | str                             { StrA($1) }
  | str LBRAK expression RBRAK      { IndexExpr($1,$3) } 
  | expression1                     { $1 }

expression1:
  | NUM                             { Num($1) }
  | MINUS expression1               { UMinusExpr($2) }
  | PLUS expression1                { UPlusExpr($2) }
  | LPAR expression RPAR            { $2 }

// Variable string production
str:
  | VARIABLE                        { $1 }


// Boolean productions
//b ::= true | false | b & b | b | b | b && b | b || b | !b
//  | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)
boolexpression:
  | BOOL                                    { Bool($1) }
  | str                                     { StrB($1) }
  | boolexpression SAND boolexpression      { ShortCircuitAnd($1,$3) }
  | boolexpression SOR boolexpression       { ShortCircuitOr($1,$3) }
  | boolexpression AND boolexpression       { LogAnd($1,$3) }
  | boolexpression OR boolexpression        { LogOr($1,$3) }
  | NEG boolexpression                      { Neg($2)}
  | expression EQUAL expression             { Equal($1,$3) }
  | expression NOTEQ expression             { NotEqual($1,$3) }
  | expression GREATER expression           { Greater($1,$3) }
  | expression GREATEREQ expression         { GreaterEqual($1,$3) }
  | expression LESS expression              { Less($1,$3) }
  | expression LESSEQ expression            { LessEqual($1,$3) }
  | LPAR boolexpression RPAR                { $2 }


// Assignments productions
// c ::= x=a | x=b | A=[sv] | c,c 
// sv ::= a, sv | a
inputvalues:
  | str SETR expression                     { SetArith($1,$3) }
  | str SETR boolexpression                 { SetBool($1,$3) }
  | str SETR LBRAK seqinput RBRAK           { SetArray($1,$4) }
  | inputvalues DELIM inputvalues           { SetDelim($1,$3) }

seqinput:
  | expression DELIM seqinput               { Seq($1,$3) }
  | expression                              { Singl($1) }
// Above productions used for parsing input in executions

signvalues: 
  | str SETR PLUS                           { SignVariable($1, PIKA) }
  | str SETR MINUS                          { SignVariable($1, NARUTO) }
  | str SETR NUM                            { SignVariable($1, ZORO) }
  | str SETR LCURL seqsign RCURL            { SignArray($1, $4) }
  | signvalues DELIM signvalues             { SignDelim($1,$3) }

seqsign:
  | PLUS                                    { SSingl(PIKA) }
  | NUM                                     { SSingl(ZORO) }
  | MINUS                                   { SSingl(NARUTO) }
  | PLUS DELIM seqsign                      { SSeq(PIKA,$3) }
  | NUM DELIM seqsign                       { SSeq(ZORO,$3) }
  | MINUS DELIM seqsign                     { SSeq(NARUTO,$3) }
// Above productions used for parsing sign memory in analysis
%% 
