// Signature file for parser generated by fsyacc
module SecureParser
type token = 
  | EOF
  | FLOW
  | CLASIF
  | DELIM
  | TKNL
  | TKNC
  | VARIABLE of (string)
  | NUM of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_FLOW
    | TOKEN_CLASIF
    | TOKEN_DELIM
    | TOKEN_TKNL
    | TOKEN_TKNC
    | TOKEN_VARIABLE
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_cheatsec
    | NONTERM_seclattice
    | NONTERM_str
    | NONTERM_secclassif
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (cheatSecure) 
