// Open the file that defines the different types we shall use as AST in out GCL-parser
%{
  open TypesAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VARIABLE 
%token TKNL TKNC
%token EOF FLOW CLASIF DELIM
//the actual formats of these tokens are defined in the lexer file as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%right SETR FLOW
%right DELIM 

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <cheatSecure> start
%type <cheatSecure> cheatsec
%type <classifVal> secclassif
%type <latticeVal> seclattice
// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: cheatsec EOF                {$1}

cheatsec:
  | TKNC secclassif              { CLS($2) }
  | TKNL seclattice              { LAT($2) }
  | TKNC                         { CLS(AUTOC) }
  | TKNL                         { LAT(AUTOL) }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:


// Security lattice productions Ident -> :
seclattice: 
  | str FLOW str                    { LatFlow($1,$3) }
  | seclattice DELIM seclattice     { LatDelim($1,$3) }

// // Class production
// class:
//    | str                             { $1 } 

// Variable string production
str:
  | VARIABLE                        { $1 }

// Security classification productions:
secclassif:
  | str CLASIF str                    { ClassFlow($1,$3) }
  | secclassif DELIM secclassif       { ClassDelim($1,$3) }
%% 
