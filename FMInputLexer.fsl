{
module FMInputLexer
open FSharp.Text.Lexing
open System
open FMInputParser
System.Globalization.CultureInfo.CurrentCulture <- new System.Globalization.CultureInfo("en-US")
}

// Defined macros for some needed Regular Expressions:
let digit       = ['0'-'9']
let num         = digit+
let whitespace  = [' ' '\t' '\r' '\n']
let newline     = "\n\r" | '\n' | '\r'
let char        = ['a'-'z' 'A'-'Z']
let variable    = char ( char | digit )*
let bool        = "true" | "false"

// Rules for recognising and building tokens in top-down
rule tokenize = parse 
// ignored tokens (skipped)
| whitespace        { tokenize lexbuf }
| newline           { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
// built tokens
| num               { NUM(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| bool              { BOOL(Boolean.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| variable          { let str = LexBuffer<_>.LexemeString lexbuf in VARIABLE(str) }

// Input value setter
| '='               { SETR }

// Value delimiter(in arrays, between variables)
| ','               { DELIM }

// Arithmetic Expressions to TOKENs
| '*'               { TIMES }
| '/'               { DIV }
| '+'               { PLUS }
| '-'               { MINUS }
| '^'               { POW }
| '('               { LPAR }
| ')'               { RPAR }
| eof               { EOF }
| '['               { LBRAK }
| ']'               { RBRAK }
| "log"whitespace   { LOG }
| "ln"whitespace    { LN } 

// Boolean Expression to TOKENs
| '&'           { SAND }
| '|'           { SOR }
| "&&"          { AND }
| "||"          { OR }
| '!'           { NEG }
| "=="          { EQUAL }
| "!="          { NOTEQ }
| '>'           { GREATER }
| ">="          { GREATEREQ }
| '<'           { LESS }
| "<="          { LESSEQ }