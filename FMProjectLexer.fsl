// The generated lexer module will start with this code
{
module FMProjectLexer
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open FMProjectParser
// Set the language to English such that 4.0 is parsed as 4 and not 40.
System.Globalization.CultureInfo.CurrentCulture <- new System.Globalization.CultureInfo("en-US")
}

// We define macros for some regular expressions we will use later
let digit       = ['0'-'9'] 
let num         = digit+
let whitespace  = [' ' '\t' '\r' '\n']
let newline     = "\n\r" | '\n' | '\r'
let char        = ['a'-'z' 'A'-'Z']
let variable    =  char ( char | digit )*
let bool        = "true"|"false"
//digit can also be \d+ 
//whitespace can also be [\u00A0 \n \r \t]

// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//       This is important when tokens overlap (not in this example)
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
// deal with tokens that need to be built
| num           { NUM(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| bool          { BOOL(Boolean.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| variable      { let str = LexBuffer<_>.LexemeString lexbuf in VARIABLE(str) }

// Arithmetic expressions to TOKENs
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| eof           { EOF }
| '['           { LBRAK }
| ']'           { RBRAK }
| "log"whitespace { LOG }
| "ln"whitespace  { LN } 

// Command expressions to TOKENs
| ":="              { ASSIGN }
| "skip"whitespace  { SKIP }
| ';'               { ORDER }
| "if"whitespace    { IF }
| whitespace"fi"    { FI }
| "do"whitespace    { DO }
| whitespace"od"    { OD }

// Guarded commands expression to TOKENs 
| "->"          { IFTHEN }
| "[]"          { FATBAR }

// Boolean expression to TOKENs
| '&'           { SAND }
| '|'           { SOR }
| "&&"          { AND }
| "||"          { OR }
| '!'           { NEG }
| '='           { EQUAL }
| "!="          { NOTEQ }
| '>'           { GREATER }
| ">="          { GREATEREQ }
| '<'           { LESS }
| "<="          { LESSEQ }
