// Implementation file for parser generated by fsyacc
module FMProjectParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "FMProjectParser.fsp"

open FMProjectTypesAST

# 10 "FMProjectParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | BITWAND
  | BITWOR
  | AND
  | OR
  | NEG
  | EQUAL
  | NOTEQ
  | GREATER
  | LESS
  | GREATEREQ
  | LESSEQ
  | ASSIGN
  | SKIP
  | ORDER
  | IF
  | FI
  | DO
  | OD
  | TRUE
  | FALSE
  | IFTHEN
  | FATBAR
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | ROOT
  | LN
  | LOG
  | LBRAK
  | RBRAK
  | VARIABLE of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_BITWAND
    | TOKEN_BITWOR
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_GREATER
    | TOKEN_LESS
    | TOKEN_GREATEREQ
    | TOKEN_LESSEQ
    | TOKEN_ASSIGN
    | TOKEN_SKIP
    | TOKEN_ORDER
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IFTHEN
    | TOKEN_FATBAR
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_ROOT
    | TOKEN_LN
    | TOKEN_LOG
    | TOKEN_LBRAK
    | TOKEN_RBRAK
    | TOKEN_VARIABLE
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_expression1
    | NONTERM_boolexpression
    | NONTERM_guardcom
    | NONTERM_command

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | BITWAND  -> 0 
  | BITWOR  -> 1 
  | AND  -> 2 
  | OR  -> 3 
  | NEG  -> 4 
  | EQUAL  -> 5 
  | NOTEQ  -> 6 
  | GREATER  -> 7 
  | LESS  -> 8 
  | GREATEREQ  -> 9 
  | LESSEQ  -> 10 
  | ASSIGN  -> 11 
  | SKIP  -> 12 
  | ORDER  -> 13 
  | IF  -> 14 
  | FI  -> 15 
  | DO  -> 16 
  | OD  -> 17 
  | TRUE  -> 18 
  | FALSE  -> 19 
  | IFTHEN  -> 20 
  | FATBAR  -> 21 
  | TIMES  -> 22 
  | DIV  -> 23 
  | PLUS  -> 24 
  | MINUS  -> 25 
  | POW  -> 26 
  | LPAR  -> 27 
  | RPAR  -> 28 
  | EOF  -> 29 
  | ROOT  -> 30 
  | LN  -> 31 
  | LOG  -> 32 
  | LBRAK  -> 33 
  | RBRAK  -> 34 
  | VARIABLE _ -> 35 
  | NUM _ -> 36 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_BITWAND 
  | 1 -> TOKEN_BITWOR 
  | 2 -> TOKEN_AND 
  | 3 -> TOKEN_OR 
  | 4 -> TOKEN_NEG 
  | 5 -> TOKEN_EQUAL 
  | 6 -> TOKEN_NOTEQ 
  | 7 -> TOKEN_GREATER 
  | 8 -> TOKEN_LESS 
  | 9 -> TOKEN_GREATEREQ 
  | 10 -> TOKEN_LESSEQ 
  | 11 -> TOKEN_ASSIGN 
  | 12 -> TOKEN_SKIP 
  | 13 -> TOKEN_ORDER 
  | 14 -> TOKEN_IF 
  | 15 -> TOKEN_FI 
  | 16 -> TOKEN_DO 
  | 17 -> TOKEN_OD 
  | 18 -> TOKEN_TRUE 
  | 19 -> TOKEN_FALSE 
  | 20 -> TOKEN_IFTHEN 
  | 21 -> TOKEN_FATBAR 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIV 
  | 24 -> TOKEN_PLUS 
  | 25 -> TOKEN_MINUS 
  | 26 -> TOKEN_POW 
  | 27 -> TOKEN_LPAR 
  | 28 -> TOKEN_RPAR 
  | 29 -> TOKEN_EOF 
  | 30 -> TOKEN_ROOT 
  | 31 -> TOKEN_LN 
  | 32 -> TOKEN_LOG 
  | 33 -> TOKEN_LBRAK 
  | 34 -> TOKEN_RBRAK 
  | 35 -> TOKEN_VARIABLE 
  | 36 -> TOKEN_NUM 
  | 39 -> TOKEN_end_of_input
  | 37 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression1 
    | 13 -> NONTERM_expression1 
    | 14 -> NONTERM_expression1 
    | 15 -> NONTERM_expression1 
    | 16 -> NONTERM_boolexpression 
    | 17 -> NONTERM_boolexpression 
    | 18 -> NONTERM_boolexpression 
    | 19 -> NONTERM_boolexpression 
    | 20 -> NONTERM_boolexpression 
    | 21 -> NONTERM_boolexpression 
    | 22 -> NONTERM_boolexpression 
    | 23 -> NONTERM_boolexpression 
    | 24 -> NONTERM_boolexpression 
    | 25 -> NONTERM_boolexpression 
    | 26 -> NONTERM_boolexpression 
    | 27 -> NONTERM_boolexpression 
    | 28 -> NONTERM_boolexpression 
    | 29 -> NONTERM_boolexpression 
    | 30 -> NONTERM_guardcom 
    | 31 -> NONTERM_guardcom 
    | 32 -> NONTERM_command 
    | 33 -> NONTERM_command 
    | 34 -> NONTERM_command 
    | 35 -> NONTERM_command 
    | 36 -> NONTERM_command 
    | 37 -> NONTERM_command 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 39 
let _fsyacc_tagOfErrorTerminal = 37

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | BITWAND  -> "BITWAND" 
  | BITWOR  -> "BITWOR" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | NOTEQ  -> "NOTEQ" 
  | GREATER  -> "GREATER" 
  | LESS  -> "LESS" 
  | GREATEREQ  -> "GREATEREQ" 
  | LESSEQ  -> "LESSEQ" 
  | ASSIGN  -> "ASSIGN" 
  | SKIP  -> "SKIP" 
  | ORDER  -> "ORDER" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | IFTHEN  -> "IFTHEN" 
  | FATBAR  -> "FATBAR" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EOF  -> "EOF" 
  | ROOT  -> "ROOT" 
  | LN  -> "LN" 
  | LOG  -> "LOG" 
  | LBRAK  -> "LBRAK" 
  | RBRAK  -> "RBRAK" 
  | VARIABLE _ -> "VARIABLE" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | BITWAND  -> (null : System.Object) 
  | BITWOR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATEREQ  -> (null : System.Object) 
  | LESSEQ  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IFTHEN  -> (null : System.Object) 
  | FATBAR  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ROOT  -> (null : System.Object) 
  | LN  -> (null : System.Object) 
  | LOG  -> (null : System.Object) 
  | LBRAK  -> (null : System.Object) 
  | RBRAK  -> (null : System.Object) 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 14us; 65535us; 0us; 2us; 10us; 11us; 15us; 4us; 16us; 5us; 17us; 6us; 18us; 6us; 19us; 7us; 20us; 7us; 21us; 8us; 22us; 9us; 23us; 10us; 24us; 12us; 26us; 13us; 36us; 14us; 16us; 65535us; 0us; 28us; 10us; 28us; 15us; 28us; 16us; 28us; 17us; 28us; 18us; 29us; 19us; 28us; 20us; 30us; 21us; 28us; 22us; 28us; 23us; 28us; 24us; 28us; 26us; 28us; 31us; 32us; 33us; 34us; 36us; 28us; 0us; 65535us; 0us; 65535us; 0us; 65535us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 18us; 35us; 36us; 37us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 6us; 1us; 2us; 3us; 4us; 5us; 6us; 1us; 1us; 6us; 2us; 2us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 7us; 6us; 2us; 3us; 4us; 5us; 6us; 8us; 6us; 2us; 3us; 4us; 5us; 6us; 8us; 6us; 2us; 3us; 4us; 5us; 6us; 9us; 6us; 2us; 3us; 4us; 5us; 6us; 10us; 6us; 2us; 3us; 4us; 5us; 6us; 15us; 1us; 2us; 1us; 3us; 1us; 4us; 2us; 4us; 12us; 1us; 5us; 2us; 5us; 13us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 2us; 11us; 12us; 2us; 11us; 13us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 15us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 11us; 13us; 20us; 27us; 34us; 41us; 48us; 55us; 62us; 69us; 76us; 83us; 90us; 92us; 94us; 96us; 99us; 101us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; 123us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; |]
let _fsyacc_action_rows = 38
let _fsyacc_actionTableElements = [|8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 0us; 49152us; 6us; 32768us; 22us; 15us; 23us; 16us; 24us; 17us; 25us; 19us; 26us; 21us; 29us; 3us; 0us; 16385us; 1us; 16386us; 26us; 21us; 1us; 16387us; 26us; 21us; 3us; 16388us; 22us; 15us; 23us; 16us; 26us; 21us; 3us; 16389us; 22us; 15us; 23us; 16us; 26us; 21us; 1us; 16390us; 26us; 21us; 5us; 16391us; 22us; 15us; 23us; 16us; 24us; 17us; 25us; 19us; 26us; 21us; 11us; 32768us; 22us; 15us; 23us; 16us; 24us; 18us; 25us; 20us; 26us; 21us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 5us; 16392us; 22us; 15us; 23us; 16us; 24us; 17us; 25us; 19us; 26us; 21us; 5us; 16393us; 22us; 15us; 23us; 16us; 24us; 17us; 25us; 19us; 26us; 21us; 6us; 32768us; 22us; 15us; 23us; 16us; 24us; 17us; 25us; 19us; 26us; 21us; 34us; 27us; 6us; 32768us; 22us; 15us; 23us; 16us; 24us; 17us; 25us; 19us; 26us; 21us; 28us; 37us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 1us; 32768us; 33us; 26us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 0us; 16394us; 0us; 16395us; 3us; 16395us; 28us; 16396us; 29us; 16396us; 34us; 16396us; 3us; 16395us; 28us; 16397us; 29us; 16397us; 34us; 16397us; 4us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 36us; 35us; 0us; 16396us; 4us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 36us; 35us; 0us; 16397us; 0us; 16398us; 8us; 32768us; 24us; 31us; 25us; 33us; 27us; 36us; 30us; 22us; 31us; 24us; 32us; 23us; 35us; 25us; 36us; 35us; 0us; 16399us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 17us; 18us; 20us; 22us; 26us; 30us; 32us; 38us; 50us; 56us; 62us; 69us; 76us; 85us; 94us; 103us; 112us; 121us; 130us; 139us; 148us; 157us; 166us; 168us; 177us; 178us; 179us; 183us; 187us; 192us; 193us; 198us; 199us; 200us; 209us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 2us; 4us; 1us; 2us; 2us; 1us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 1us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 16395us; 65535us; 65535us; 65535us; 16396us; 65535us; 16397us; 16398us; 65535us; 16399us; |]
let _fsyacc_reductions ()  =    [| 
# 324 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 333 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "FMProjectParser.fsp"
                                                         _1 
                   )
# 45 "FMProjectParser.fsp"
                 : expr));
# 344 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "FMProjectParser.fsp"
                                                           TimesExpr(_1,_3) 
                   )
# 57 "FMProjectParser.fsp"
                 : expr));
# 356 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "FMProjectParser.fsp"
                                                           DivExpr(_1,_3) 
                   )
# 58 "FMProjectParser.fsp"
                 : expr));
# 368 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "FMProjectParser.fsp"
                                                           PlusExpr(_1,_3) 
                   )
# 59 "FMProjectParser.fsp"
                 : expr));
# 380 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "FMProjectParser.fsp"
                                                           MinusExpr(_1,_3) 
                   )
# 60 "FMProjectParser.fsp"
                 : expr));
# 392 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "FMProjectParser.fsp"
                                                           PowExpr(_1,_3) 
                   )
# 61 "FMProjectParser.fsp"
                 : expr));
# 404 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "FMProjectParser.fsp"
                                                           RootExpr(_2) 
                   )
# 62 "FMProjectParser.fsp"
                 : expr));
# 415 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "FMProjectParser.fsp"
                                                           LogExpr(_2,_3) 
                   )
# 63 "FMProjectParser.fsp"
                 : expr));
# 427 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "FMProjectParser.fsp"
                                                           LnExpr(_2) 
                   )
# 64 "FMProjectParser.fsp"
                 : expr));
# 438 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "FMProjectParser.fsp"
                                                           IndexExpr(_1,_3) 
                   )
# 65 "FMProjectParser.fsp"
                 : expr));
# 450 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "FMProjectParser.fsp"
                                                           _1 
                   )
# 66 "FMProjectParser.fsp"
                 : expr));
# 461 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "FMProjectParser.fsp"
                                                           UPlusExpr(_2) 
                   )
# 69 "FMProjectParser.fsp"
                 : expr));
# 472 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "FMProjectParser.fsp"
                                                           UMinusExpr(_2) 
                   )
# 70 "FMProjectParser.fsp"
                 : expr));
# 483 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "FMProjectParser.fsp"
                                                           Num(_1) 
                   )
# 71 "FMProjectParser.fsp"
                 : expr));
# 494 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "FMProjectParser.fsp"
                                                           _2 
                   )
# 72 "FMProjectParser.fsp"
                 : expr));
# 505 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "FMProjectParser.fsp"
                                                                   True 
                   )
# 77 "FMProjectParser.fsp"
                 : boolExpr));
# 515 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "FMProjectParser.fsp"
                                                                   False 
                   )
# 78 "FMProjectParser.fsp"
                 : boolExpr));
# 525 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "FMProjectParser.fsp"
                                                                   BitWiseAnd(_1,_3) 
                   )
# 79 "FMProjectParser.fsp"
                 : boolExpr));
# 537 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "FMProjectParser.fsp"
                                                                   BitWiseOr(_1,_3) 
                   )
# 80 "FMProjectParser.fsp"
                 : boolExpr));
# 549 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "FMProjectParser.fsp"
                                                                   LogAnd(_1,_3) 
                   )
# 81 "FMProjectParser.fsp"
                 : boolExpr));
# 561 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "FMProjectParser.fsp"
                                                                   LogOr(_1,_3) 
                   )
# 82 "FMProjectParser.fsp"
                 : boolExpr));
# 573 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "FMProjectParser.fsp"
                                                                   Neg(_2)
                   )
# 83 "FMProjectParser.fsp"
                 : boolExpr));
# 584 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "FMProjectParser.fsp"
                                                                   Equal(_1,_3) 
                   )
# 84 "FMProjectParser.fsp"
                 : boolExpr));
# 596 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "FMProjectParser.fsp"
                                                                   NotEqual(_1,_3) 
                   )
# 85 "FMProjectParser.fsp"
                 : boolExpr));
# 608 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "FMProjectParser.fsp"
                                                                   Greater(_1,_3) 
                   )
# 86 "FMProjectParser.fsp"
                 : boolExpr));
# 620 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "FMProjectParser.fsp"
                                                                   GreaterEqual(_1,_3) 
                   )
# 87 "FMProjectParser.fsp"
                 : boolExpr));
# 632 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "FMProjectParser.fsp"
                                                                   Less(_1,_3) 
                   )
# 88 "FMProjectParser.fsp"
                 : boolExpr));
# 644 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "FMProjectParser.fsp"
                                                                   LessEqual(_1,_3) 
                   )
# 89 "FMProjectParser.fsp"
                 : boolExpr));
# 656 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "FMProjectParser.fsp"
                                                                   _2 
                   )
# 90 "FMProjectParser.fsp"
                 : boolExpr));
# 667 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "FMProjectParser.fsp"
                                                         IfThen(_1,_3) 
                   )
# 94 "FMProjectParser.fsp"
                 : guardCommand));
# 679 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : guardCommand)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : guardCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "FMProjectParser.fsp"
                                                         FatBar(_1,_3) 
                   )
# 95 "FMProjectParser.fsp"
                 : guardCommand));
# 691 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "FMProjectParser.fsp"
                                                                             Assign(Var(_1),_3) 
                   )
# 99 "FMProjectParser.fsp"
                 : command));
# 703 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "FMProjectParser.fsp"
                                                                             Assign(IndexExpr(_1,_3),_6) 
                   )
# 100 "FMProjectParser.fsp"
                 : command));
# 716 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "FMProjectParser.fsp"
                                                                             Skip 
                   )
# 101 "FMProjectParser.fsp"
                 : command));
# 726 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "FMProjectParser.fsp"
                                                                             Order(_1,_3)
                   )
# 102 "FMProjectParser.fsp"
                 : command));
# 738 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "FMProjectParser.fsp"
                                                                             If(_2) 
                   )
# 103 "FMProjectParser.fsp"
                 : command));
# 749 "FMProjectParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : guardCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "FMProjectParser.fsp"
                                                                             Do(_2) 
                   )
# 104 "FMProjectParser.fsp"
                 : command));
|]
# 761 "FMProjectParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 40;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
